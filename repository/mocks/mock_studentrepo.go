// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/goplay/repository (interfaces: MongoStudentIfc)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/goplay/model"
	reflect "reflect"
)

// MongoStudentRepo is a mock of MongoStudentIfc interface
type MongoStudentRepo struct {
	ctrl     *gomock.Controller
	recorder *MongoStudentRepoMockRecorder
}

// MongoStudentRepoMockRecorder is the mock recorder for MongoStudentRepo
type MongoStudentRepoMockRecorder struct {
	mock *MongoStudentRepo
}

// NewMongoStudentRepo creates a new mock instance
func NewMongoStudentRepo(ctrl *gomock.Controller) *MongoStudentRepo {
	mock := &MongoStudentRepo{ctrl: ctrl}
	mock.recorder = &MongoStudentRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MongoStudentRepo) EXPECT() *MongoStudentRepoMockRecorder {
	return m.recorder
}

// CreateStudent mocks base method
func (m *MongoStudentRepo) CreateStudent(arg0 *model.Student) error {
	ret := m.ctrl.Call(m, "CreateStudent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStudent indicates an expected call of CreateStudent
func (mr *MongoStudentRepoMockRecorder) CreateStudent(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudent", reflect.TypeOf((*MongoStudentRepo)(nil).CreateStudent), arg0)
}

// FindAllStudents mocks base method
func (m *MongoStudentRepo) FindAllStudents() (*[]model.Student, error) {
	ret := m.ctrl.Call(m, "FindAllStudents")
	ret0, _ := ret[0].(*[]model.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllStudents indicates an expected call of FindAllStudents
func (mr *MongoStudentRepoMockRecorder) FindAllStudents() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllStudents", reflect.TypeOf((*MongoStudentRepo)(nil).FindAllStudents))
}

// FindStudentByID mocks base method
func (m *MongoStudentRepo) FindStudentByID(arg0 string) (*model.Student, error) {
	ret := m.ctrl.Call(m, "FindStudentByID", arg0)
	ret0, _ := ret[0].(*model.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStudentByID indicates an expected call of FindStudentByID
func (mr *MongoStudentRepoMockRecorder) FindStudentByID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStudentByID", reflect.TypeOf((*MongoStudentRepo)(nil).FindStudentByID), arg0)
}
